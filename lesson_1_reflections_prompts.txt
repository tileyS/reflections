How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Using diff instead of comparing the documents side by side proved to be very efficient. 

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    This is something that is essential. I will end up spending less time de-bugging programs and focus on programming instead. I am assuming that I will end up in less clutter. 

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    It gives a lot more freedom to the user. The user knows what is worth saving. Furthermore the programmer knows when the task is complete. Less clutter at the end of the day, easier to track changes...

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

	The files may be dependent to eachother and this is a logical and efficient way to take care of that. 

How can you use the commands git log and git diff to view the history of files?

    git log will give you a log of the updates/saves (hisory of commitments) to the file. You can get the id of two logs that you would like to compare and use git diff old new to compare the two. 

How might using version control make you more confident to make changes that
could break something?

	You can always "checkout" to an earlier commitment and find the last version that worked. Allows to work freely, exploring. Not necessarily incremental changes. 

Now that you have your workspace set up, what do you want to try using Git for?

    Whenever I am programming. 